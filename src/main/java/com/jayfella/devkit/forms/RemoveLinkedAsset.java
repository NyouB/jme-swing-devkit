package com.jayfella.devkit.forms;

import com.google.common.collect.ImmutableList;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.jayfella.devkit.registration.spatial.AssetLinkNodeRegistrar.AssetLinkNodeTreeNode;
import com.jayfella.devkit.service.JmeEngineService;
import com.jayfella.devkit.service.SceneTreeService;
import com.jayfella.devkit.service.ServiceManager;
import com.jayfella.devkit.swing.ComponentUtilities;
import com.jme3.asset.ModelKey;
import com.jme3.scene.AssetLinkNode;
import java.awt.Insets;
import java.awt.Window;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;

public class RemoveLinkedAsset {

  private JPanel rootPanel;
  private JList<ModelKey> modelKeysList;
  private JButton removeLinkedAssetsButton;

  public RemoveLinkedAsset(AssetLinkNodeTreeNode assetLinkNodeTreeNode) {

    JmeEngineService engineService = ServiceManager.getService(JmeEngineService.class);

    engineService.enqueue(() -> {
      final ImmutableList<ModelKey> modelKeys = ImmutableList
          .copyOf(assetLinkNodeTreeNode.getUserObject().getAssetLoaderKeys());

      SwingUtilities.invokeLater(() -> {
        DefaultListModel<ModelKey> listModel = new DefaultListModel<>();

        for (ModelKey key : modelKeys) {
          listModel.addElement(key);
        }

        modelKeysList.setModel(listModel);
      });

    });

    removeLinkedAssetsButton.addActionListener(e -> {

      int[] indices = modelKeysList.getSelectedIndices();

      if (indices != null && indices.length > 0) {

        // disable the window
        ComponentUtilities.enableComponents(rootPanel, false);

        // then run this "later" so the GUI can display the "disabled" view now.
        SwingUtilities.invokeLater(() -> {

          // get the list of models in the AWT thread.
          final List<ModelKey> selectedModelKeys = new ArrayList<>();
          for (int index : indices) {
            selectedModelKeys.add(modelKeysList.getModel().getElementAt(index));
          }

          engineService.enqueue(() -> {

            AssetLinkNode assetLinkNode = assetLinkNodeTreeNode.getUserObject();

            for (ModelKey key : selectedModelKeys) {
              assetLinkNode.removeLinkedChild(key);
            }

            // reload all models.
            assetLinkNode.attachLinkedChildren(engineService.getAssetManager());

            // close the window on the AWT thread.
            SwingUtilities.invokeLater(() -> {

              ServiceManager.getService(SceneTreeService.class)
                  .reloadTreeNode(assetLinkNodeTreeNode);

              JButton button = (JButton) e.getSource();
              Window window = SwingUtilities.getWindowAncestor(button);
              window.dispose();
            });

          });

        });

      }

    });

  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    rootPanel = new JPanel();
    rootPanel.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
    final JScrollPane scrollPane1 = new JScrollPane();
    rootPanel.add(scrollPane1,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null,
            null, null, 0, false));
    modelKeysList = new JList();
    scrollPane1.setViewportView(modelKeysList);
    removeLinkedAssetsButton = new JButton();
    removeLinkedAssetsButton.setText("Remove Selected Linked Assets");
    rootPanel.add(removeLinkedAssetsButton,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return rootPanel;
  }


}
